
AVRASM ver. 2.1.30  D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm Sat Jan 04 09:04:44 2025

D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1093): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF __lcd_x=R3
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R5
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0059 	JMP  __RESET
000002 940c 0088 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1134): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x0
                 
                 _0x0:
000035 6f43
000036 6e75
000037 6574
000038 3a72      	.DB  0x43,0x6F,0x75,0x6E,0x74,0x65,0x72,0x3A
000039 4900
00003a 544e
00003b 5245
00003c 5552      	.DB  0x0,0x49,0x4E,0x54,0x45,0x52,0x52,0x55
00003d 5450
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1139): warning: .cseg .db misalignment - padding zero byte
00003e 0000      	.DB  0x50,0x54,0x0
                 _0x2000003:
00003f c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1143): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x2020000:
000041 4e2d
000042 4e41
000043 4900
000044 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P5_Interrupt_LCD\CVAVR\Debug\List\P5_Interrupt_LCD.asm(1146): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000046 0001      	.DW  0x01
000047 0004      	.DW  0x04
000048 0068      	.DW  __REG_VARS*2
                 
000049 0009      	.DW  0x09
00004a 0300      	.DW  _0x3
00004b 006a      	.DW  _0x0*2
                 
00004c 000a      	.DW  0x0A
00004d 0309      	.DW  _0x4
00004e 0073      	.DW  _0x0*2+9
                 
00004f 0009      	.DW  0x09
000050 0313      	.DW  _0x4+10
000051 006a      	.DW  _0x0*2
                 
000052 0002      	.DW  0x02
000053 031f      	.DW  __base_y_G100
000054 007e      	.DW  _0x2000003*2
                 
000055 0001      	.DW  0x01
000056 0323      	.DW  __seed_G101
000057 0080      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000058 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000059 94f8      	CLI
00005a 27ee      	CLR  R30
00005b bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005c e0f1      	LDI  R31,1
00005d bff5      	OUT  MCUCR,R31
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e0a0      	LDI  R26,LOW(__SRAM_START)
000068 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00007e e0e0      	LDI  R30,__GPIOR0_INIT
00007f bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 00b0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;
                 ;unsigned char counter = 0;
                 ;unsigned char myStr[3];
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 000A {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000088 920a      	ST   -Y,R0
000089 921a      	ST   -Y,R1
00008a 92fa      	ST   -Y,R15
00008b 936a      	ST   -Y,R22
00008c 937a      	ST   -Y,R23
00008d 938a      	ST   -Y,R24
00008e 939a      	ST   -Y,R25
00008f 93aa      	ST   -Y,R26
000090 93ba      	ST   -Y,R27
000091 93ea      	ST   -Y,R30
000092 93fa      	ST   -Y,R31
000093 b7ef      	IN   R30,SREG
000094 93ea      	ST   -Y,R30
                 ; 0000 000B     counter++;    //dem len sau moi lan ngat
000095 9443      	INC  R4
                 ; 0000 000C     itoa(counter, myStr);
000096 940e 01a3 	CALL SUBOPT_0x0
                 ; 0000 000D     lcd_gotoxy(0,1);
000098 e0e0      	LDI  R30,LOW(0)
000099 93ea      	ST   -Y,R30
00009a e0a1      	LDI  R26,LOW(1)
00009b d06b      	RCALL _lcd_gotoxy
                 ; 0000 000E     lcd_puts("Counter:");
                +
00009c e0a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
00009d e0b3     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
00009e d096      	RCALL _lcd_puts
                 ; 0000 000F     lcd_puts(myStr);
00009f e1ac      	LDI  R26,LOW(_myStr)
0000a0 e0b3      	LDI  R27,HIGH(_myStr)
0000a1 d093      	RCALL _lcd_puts
                 ; 0000 0010 }
0000a2 91e9      	LD   R30,Y+
0000a3 bfef      	OUT  SREG,R30
0000a4 91f9      	LD   R31,Y+
0000a5 91e9      	LD   R30,Y+
0000a6 91b9      	LD   R27,Y+
0000a7 91a9      	LD   R26,Y+
0000a8 9199      	LD   R25,Y+
0000a9 9189      	LD   R24,Y+
0000aa 9179      	LD   R23,Y+
0000ab 9169      	LD   R22,Y+
0000ac 90f9      	LD   R15,Y+
0000ad 9019      	LD   R1,Y+
0000ae 9009      	LD   R0,Y+
0000af 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000300           	.BYTE 0x9
                 ;
                 ;void main(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0014     #pragma optsize-
                 ; 0000 0015     CLKPR=(1<<CLKPCE);
0000b0 e8e0      	LDI  R30,LOW(128)
0000b1 93e0 0061 	STS  97,R30
                 ; 0000 0016     CLKPR=0x00;
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 93e0 0061 	STS  97,R30
                 ; 0000 0017     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0018     #pragma optsize+
                 ; 0000 0019     #endif
                 ; 0000 001A 
                 ; 0000 001B     lcd_init(16);
0000b6 e1a0      	LDI  R26,LOW(16)
0000b7 d08e      	RCALL _lcd_init
                 ; 0000 001C     lcd_gotoxy(3,0);
0000b8 e0e3      	LDI  R30,LOW(3)
0000b9 93ea      	ST   -Y,R30
0000ba e0a0      	LDI  R26,LOW(0)
0000bb d04b      	RCALL _lcd_gotoxy
                 ; 0000 001D     lcd_puts("INTERRUPT");
                +
0000bc e0a9     +LDI R26 , LOW ( _0x4 + ( 0 ) )
0000bd e0b3     +LDI R27 , HIGH ( _0x4 + ( 0 ) )
                 	__POINTW2MN _0x4,0
0000be d076      	RCALL _lcd_puts
                 ; 0000 001E     lcd_gotoxy(0,1);
0000bf e0e0      	LDI  R30,LOW(0)
0000c0 93ea      	ST   -Y,R30
0000c1 e0a1      	LDI  R26,LOW(1)
0000c2 d044      	RCALL _lcd_gotoxy
                 ; 0000 001F     lcd_puts("Counter:");
                +
0000c3 e1a3     +LDI R26 , LOW ( _0x4 + ( 10 ) )
0000c4 e0b3     +LDI R27 , HIGH ( _0x4 + ( 10 ) )
                 	__POINTW2MN _0x4,10
0000c5 d06f      	RCALL _lcd_puts
                 ; 0000 0020     itoa(counter, myStr);
0000c6 940e 01a3 	CALL SUBOPT_0x0
                 ; 0000 0021     lcd_puts(myStr);
0000c8 e1ac      	LDI  R26,LOW(_myStr)
0000c9 e0b3      	LDI  R27,HIGH(_myStr)
0000ca d06a      	RCALL _lcd_puts
                 ; 0000 0022 
                 ; 0000 0023   // su dung chan PD2 de doc nut nhan
                 ; 0000 0024   // cau hinh dien tro keo len chan PD2
                 ; 0000 0025     PORTD |= (1<<PORTD2);   //PORTD.2 = 1;
0000cb 9a5a      	SBI  0xB,2
                 ; 0000 0026     DDRD  &= ~(1<<DDD2);    //DDRD.2 = 0;
0000cc 9852      	CBI  0xA,2
                 ; 0000 0027 
                 ; 0000 0028   //su dung ngat 0, lay canh xuong
                 ; 0000 0029     EICRA = (1<<ISC01) | (0<<ISC00);
0000cd e0e2      	LDI  R30,LOW(2)
0000ce 93e0 0069 	STS  105,R30
                 ; 0000 002A     EIMSK = (0<<INT1) | (1<<INT0);
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 bbed      	OUT  0x1D,R30
                 ; 0000 002B     EIFR  = (0<<INTF1) | (1<<INTF0);
0000d2 bbec      	OUT  0x1C,R30
                 ; 0000 002C 
                 ; 0000 002D     #asm("sei")
0000d3 9478      	sei
                 ; 0000 002E     while (1){}
                 _0x5:
0000d4 cfff      	RJMP _0x5
                 ; 0000 002F }
                 _0x8:
0000d5 cfff      	RJMP _0x8
                 ; .FEND
                 
                 	.DSEG
                 _0x4:
000309           	.BYTE 0x13
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000d6 93aa      	ST   -Y,R26
0000d7 81e8      	LD   R30,Y
0000d8 71e0      	ANDI R30,LOW(0x10)
0000d9 f011      	BREQ _0x2000004
0000da 9a2b      	SBI  0x5,3
0000db c001      	RJMP _0x2000005
                 _0x2000004:
0000dc 982b      	CBI  0x5,3
                 _0x2000005:
0000dd 81e8      	LD   R30,Y
0000de 72e0      	ANDI R30,LOW(0x20)
0000df f011      	BREQ _0x2000006
0000e0 9a2a      	SBI  0x5,2
0000e1 c001      	RJMP _0x2000007
                 _0x2000006:
0000e2 982a      	CBI  0x5,2
                 _0x2000007:
0000e3 81e8      	LD   R30,Y
0000e4 74e0      	ANDI R30,LOW(0x40)
0000e5 f011      	BREQ _0x2000008
0000e6 9a29      	SBI  0x5,1
0000e7 c001      	RJMP _0x2000009
                 _0x2000008:
0000e8 9829      	CBI  0x5,1
                 _0x2000009:
0000e9 81e8      	LD   R30,Y
0000ea 78e0      	ANDI R30,LOW(0x80)
0000eb f011      	BREQ _0x200000A
0000ec 9a28      	SBI  0x5,0
0000ed c001      	RJMP _0x200000B
                 _0x200000A:
0000ee 9828      	CBI  0x5,0
                 _0x200000B:
                +
0000ef e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f0 958a     +DEC R24
0000f1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f2 9a2c      	SBI  0x5,4
                +
0000f3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f4 958a     +DEC R24
0000f5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000f6 982c      	CBI  0x5,4
                +
0000f7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000f8 958a     +DEC R24
0000f9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000fa c078      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fb 93aa      	ST   -Y,R26
0000fc 81a8      	LD   R26,Y
0000fd dfd8      	RCALL __lcd_write_nibble_G100
0000fe 81e8          ld    r30,y
0000ff 95e2          swap  r30
000100 83e8          st    y,r30
000101 81a8      	LD   R26,Y
000102 dfd3      	RCALL __lcd_write_nibble_G100
                +
000103 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000104 958a     +DEC R24
000105 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000106 c06c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000107 93aa      	ST   -Y,R26
000108 81e8      	LD   R30,Y
000109 e0f0      	LDI  R31,0
00010a 5ee1      	SUBI R30,LOW(-__base_y_G100)
00010b 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00010c 81e0      	LD   R30,Z
00010d 81a9      	LDD  R26,Y+1
00010e 0fae      	ADD  R26,R30
00010f dfeb      	RCALL __lcd_write_data
000110 8039      	LDD  R3,Y+1
000111 8068      	LDD  R6,Y+0
000112 9622      	ADIW R28,2
000113 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000114 e0a2      	LDI  R26,LOW(2)
000115 940e 01ab 	CALL SUBOPT_0x1
000117 e0ac      	LDI  R26,LOW(12)
000118 dfe2      	RCALL __lcd_write_data
000119 e0a1      	LDI  R26,LOW(1)
00011a 940e 01ab 	CALL SUBOPT_0x1
00011c e0e0      	LDI  R30,LOW(0)
00011d 2e6e      	MOV  R6,R30
00011e 2e3e      	MOV  R3,R30
00011f 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000120 93aa      	ST   -Y,R26
000121 81a8      	LD   R26,Y
000122 30aa      	CPI  R26,LOW(0xA)
000123 f011      	BREQ _0x2000011
000124 1435      	CP   R3,R5
000125 f048      	BRLO _0x2000010
                 _0x2000011:
000126 e0e0      	LDI  R30,LOW(0)
000127 93ea      	ST   -Y,R30
000128 9463      	INC  R6
000129 2da6      	MOV  R26,R6
00012a dfdc      	RCALL _lcd_gotoxy
00012b 81a8      	LD   R26,Y
00012c 30aa      	CPI  R26,LOW(0xA)
00012d f409      	BRNE _0x2000013
00012e c044      	RJMP _0x20A0001
                 _0x2000013:
                 _0x2000010:
00012f 9433      	INC  R3
000130 9a2e      	SBI  0x5,6
000131 81a8      	LD   R26,Y
000132 dfc8      	RCALL __lcd_write_data
000133 982e      	CBI  0x5,6
000134 c03e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000135 93ba      	ST   -Y,R27
000136 93aa      	ST   -Y,R26
000137 931a      	ST   -Y,R17
                 _0x2000014:
000138 81a9      	LDD  R26,Y+1
000139 81ba      	LDD  R27,Y+1+1
00013a 91ed      	LD   R30,X+
00013b 83a9      	STD  Y+1,R26
00013c 83ba      	STD  Y+1+1,R27
00013d 2f1e      	MOV  R17,R30
00013e 30e0      	CPI  R30,0
00013f f019      	BREQ _0x2000016
000140 2fa1      	MOV  R26,R17
000141 dfde      	RCALL _lcd_putchar
000142 cff5      	RJMP _0x2000014
                 _0x2000016:
000143 8118      	LDD  R17,Y+0
000144 9623      	ADIW R28,3
000145 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000146 93aa      	ST   -Y,R26
000147 9a23      	SBI  0x4,3
000148 9a22      	SBI  0x4,2
000149 9a21      	SBI  0x4,1
00014a 9a20      	SBI  0x4,0
00014b 9a24      	SBI  0x4,4
00014c 9a26      	SBI  0x4,6
00014d 9a25      	SBI  0x4,5
00014e 982c      	CBI  0x5,4
00014f 982e      	CBI  0x5,6
000150 982d      	CBI  0x5,5
000151 8058      	LDD  R5,Y+0
000152 81e8      	LD   R30,Y
000153 58e0      	SUBI R30,-LOW(128)
                +
000154 93e0 0321+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000156 81e8      	LD   R30,Y
000157 54e0      	SUBI R30,-LOW(192)
                +
000158 93e0 0322+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00015a e1a4      	LDI  R26,LOW(20)
00015b e0b0      	LDI  R27,0
00015c 940e 01b9 	CALL _delay_ms
00015e 940e 01b1 	CALL SUBOPT_0x2
000160 940e 01b1 	CALL SUBOPT_0x2
000162 940e 01b1 	CALL SUBOPT_0x2
000164 e2a0      	LDI  R26,LOW(32)
000165 df70      	RCALL __lcd_write_nibble_G100
                +
000166 ec88     +LDI R24 , LOW ( 200 )
000167 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000168 9701     +SBIW R24 , 1
000169 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00016a e2a8      	LDI  R26,LOW(40)
00016b df8f      	RCALL __lcd_write_data
00016c e0a4      	LDI  R26,LOW(4)
00016d df8d      	RCALL __lcd_write_data
00016e e8a5      	LDI  R26,LOW(133)
00016f df8b      	RCALL __lcd_write_data
000170 e0a6      	LDI  R26,LOW(6)
000171 df89      	RCALL __lcd_write_data
000172 dfa1      	RCALL _lcd_clear
                 _0x20A0001:
000173 9621      	ADIW R28,1
000174 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000175 93ba      	ST   -Y,R27
000176 93aa      	ST   -Y,R26
000177 91a9          ld   r26,y+
000178 91b9          ld   r27,y+
000179 91e9          ld   r30,y+
00017a 91f9          ld   r31,y+
00017b 9630          adiw r30,0
00017c f42a          brpl __itoa0
00017d 95e0          com  r30
00017e 95f0          com  r31
00017f 9631          adiw r30,1
000180 e26d          ldi  r22,'-'
000181 936d          st   x+,r22
                 __itoa0:
000182 94e8          clt
000183 e180          ldi  r24,low(10000)
000184 e297          ldi  r25,high(10000)
000185 d00d          rcall __itoa1
000186 ee88          ldi  r24,low(1000)
000187 e093          ldi  r25,high(1000)
000188 d00a          rcall __itoa1
000189 e684          ldi  r24,100
00018a 2799          clr  r25
00018b d007          rcall __itoa1
00018c e08a          ldi  r24,10
00018d d005          rcall __itoa1
00018e 2f6e          mov  r22,r30
00018f d010          rcall __itoa5
000190 2766          clr  r22
000191 936c          st   x,r22
000192 9508          ret
                 
                 __itoa1:
000193 2766          clr	 r22
                 __itoa2:
000194 17e8          cp   r30,r24
000195 07f9          cpc  r31,r25
000196 f020          brlo __itoa3
000197 9563          inc  r22
000198 1be8          sub  r30,r24
000199 0bf9          sbc  r31,r25
00019a f7c9          brne __itoa2
                 __itoa3:
00019b 2366          tst  r22
00019c f411          brne __itoa4
00019d f016          brts __itoa5
00019e 9508          ret
                 __itoa4:
00019f 9468          set
                 __itoa5:
0001a0 5d60          subi r22,-0x30
0001a1 936d          st   x+,r22
0001a2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _myStr:
00031c           	.BYTE 0x3
                 __base_y_G100:
00031f           	.BYTE 0x4
                 __seed_G101:
000323           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001a3 2de4      	MOV  R30,R4
0001a4 e0f0      	LDI  R31,0
0001a5 93fa      	ST   -Y,R31
0001a6 93ea      	ST   -Y,R30
0001a7 e1ac      	LDI  R26,LOW(_myStr)
0001a8 e0b3      	LDI  R27,HIGH(_myStr)
0001a9 940c 0175 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001ab 940e 00fb 	CALL __lcd_write_data
0001ad e0a3      	LDI  R26,LOW(3)
0001ae e0b0      	LDI  R27,0
0001af 940c 01b9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001b1 e3a0      	LDI  R26,LOW(48)
0001b2 940e 00d6 	CALL __lcd_write_nibble_G100
                +
0001b4 ec88     +LDI R24 , LOW ( 200 )
0001b5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001b6 9701     +SBIW R24 , 1
0001b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001b8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001b9 9610      	adiw r26,0
0001ba f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001bb ed80     +LDI R24 , LOW ( 0x7D0 )
0001bc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001bd 9701     +SBIW R24 , 1
0001be f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001bf 95a8      	wdr
0001c0 9711      	sbiw r26,1
0001c1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   4 r4 :   2 r5 :   2 r6 :   4 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:  14 r23:   2 
r24:  29 r25:  12 r26:  49 r27:  18 r28:   4 r29:   1 r30:  74 r31:  13 
x  :   7 y  :  67 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   6 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  10 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   2 cpc   :   1 cpi   :   3 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   4 jmp   :  29 ld    :  31 ldd   :   7 ldi   :  71 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   7 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   9 pop   :   0 push  :   0 rcall :  27 ret   :   9 
reti  :   1 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :  14 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  35 std   :   2 sts   :   5 sub   :   1 subi  :   4 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000386    828     74    902   32768   2.8%
[.dseg] 0x000100 0x000327      0     39     39    2048   1.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
