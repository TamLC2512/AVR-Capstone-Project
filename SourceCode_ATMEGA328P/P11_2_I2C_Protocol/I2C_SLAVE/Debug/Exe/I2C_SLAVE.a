;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <io.h>
;#include <delay.h>
;
;#define SLAVE_ADDRESS 0x20
;unsigned int received_data = 0;
;
;void I2C_INIT_SLAVE() {
; 0000 0008 void I2C_INIT_SLAVE() {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0009     //gan dia chi vao thanh ghi TWAR
; 0000 000A     TWAR = (SLAVE_ADDRESS << 1);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000B     //kich hoat I2C, bit ACK
; 0000 000C     TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000D }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;unsigned int I2C_WAIT() {
; 0000 000E unsigned int I2C_WAIT() {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 000F     while (!(TWCR & (1 << TWINT)));
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0010     return TWSR & 0xF8;  //tra ve 5 bit cao cua TWSR
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0011 }
;PCODE: $00000021 VOL: 0
;unsigned int I2C_RECEIVE() {
; 0000 0012 unsigned int I2C_RECEIVE() {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0013     return TWDR;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0014 }
;PCODE: $00000027 VOL: 0
;void I2C_ACKNOWLEDGE() {
; 0000 0015 void I2C_ACKNOWLEDGE() {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0016     TWCR = (1 << TWEN) | (1 << TWEA) | (1 << TWINT);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0017 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;void I2C_RESET() {
; 0000 0018 void I2C_RESET() {
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0019     TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001A }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;void main() {
; 0000 001B void main() {
;PCODE: $00000034 VOL: 0
; 0000 001C     // Crystal Oscillator division factor: 1
; 0000 001D     #pragma optsize-
; 0000 001E     CLKPR=(1<<CLKPCE);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 001F     CLKPR= 0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0020     #ifdef _OPTIMIZE_SIZE_
; 0000 0021     #pragma optsize+
; 0000 0022     #endif
; 0000 0023 
; 0000 0024     //khai bao chan PB0 dieu khien LED
; 0000 0025     DDRB |= (1 << DDB0);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0026     PORTB &= ~(1 << PORTB0);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0027 
; 0000 0028     I2C_INIT_SLAVE();
;PCODE: $0000003D VOL: 0
; 0000 0029 
; 0000 002A     while (1) {
;PCODE: $0000003E VOL: 0
; 0000 002B         if (I2C_WAIT() == 0x60) {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 002C             I2C_ACKNOWLEDGE();
;PCODE: $00000042 VOL: 0
; 0000 002D         }
; 0000 002E         if (I2C_WAIT() == 0x80) {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002F             received_data = I2C_RECEIVE();
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0030             I2C_ACKNOWLEDGE();
;PCODE: $00000049 VOL: 0
; 0000 0031         }
; 0000 0032         if (I2C_WAIT() == 0xA0) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0033             I2C_RESET();
;PCODE: $0000004E VOL: 0
; 0000 0034         }
; 0000 0035         if (received_data == 0x01) {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0036             PORTB ^= (1 << PORTB0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0037             delay_ms(50);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0038             received_data = 0;
;PCODE: $0000005A VOL: 0
; 0000 0039         }
; 0000 003A     }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003B }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
