;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;
;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;void Display_Value(unsigned int number);
;
;unsigned int resultADC5;
;unsigned int Temp;
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 000D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000F     delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0010   // bat dau qua trinh chuyen doi
; 0000 0011     ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0012   //cho den khi qua trinh chuyen doi ket thuc
; 0000 0013     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0014     ADCSRA|=(1<<ADIF);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0015     return ADCW;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0016 }
;PCODE: $00000023 VOL: 0
;
;void main(void)
; 0000 0019 {
;PCODE: $00000024 VOL: 0
; 0000 001A     #pragma optsize-
; 0000 001B     CLKPR = (1<<CLKPCE);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 001C     CLKPR = 0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 001D     #ifdef _OPTIMIZE_SIZE_
; 0000 001E     #pragma optsize+
; 0000 001F     #endif
; 0000 0020 
; 0000 0021     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0022   // kich hoat ADC, chon bo chia 8 <=> 125.000kHz
; 0000 0023     ADCSRA =(1<<ADEN) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0024     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0025 
; 0000 0026     lcd_init(16);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0027     lcd_gotoxy(1,0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0028     lcd_puts("ADC with LM35 ");
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0029     delay_ms(1000);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002A 
; 0000 002B     while (1)
;PCODE: $0000003A VOL: 0
; 0000 002C     {
; 0000 002D       //du lieu duoc doc tu ADC
; 0000 002E         resultADC5 = read_adc(5);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 002F 
; 0000 0030       //Temp = resultADC5*500/1024
; 0000 0031         Temp = (resultADC5*125/256); //da rut gon
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0032         lcd_gotoxy(4,1);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0033         lcd_putsf("Temp:");
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0034         Display_Value(Temp);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0035     }
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0036 }
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0

	.DSEG
_0x6:
	.BYTE 0xF
;//Ham hien thi
;void Display_Value(unsigned int number)
; 0000 0039 {

	.CSEG
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 003A     unsigned int tram,chuc,donvi;
; 0000 003B     tram = number/100%10;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;	number -> Y+6
;	tram -> R16,R17
;	chuc -> R18,R19
;	donvi -> R20,R21
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003C     chuc = (number/10)%10;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 003D     donvi = number%10;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 003E     lcd_putchar(tram+48);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 003F     lcd_putchar(chuc+48);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0040     lcd_putchar(donvi+48);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0041 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
