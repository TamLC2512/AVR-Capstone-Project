
AVRASM ver. 2.1.30  D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P7_3_TempSensor\CVAVR\Debug\List\Temp_Sensor.asm Wed Jan 08 13:39:43 2025

D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P7_3_TempSensor\CVAVR\Debug\List\Temp_Sensor.asm(1090): warning: Register r3 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P7_3_TempSensor\CVAVR\Debug\List\Temp_Sensor.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P7_3_TempSensor\CVAVR\Debug\List\Temp_Sensor.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P7_3_TempSensor\CVAVR\Debug\List\Temp_Sensor.asm(1093): warning: Register r5 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P7_3_TempSensor\CVAVR\Debug\List\Temp_Sensor.asm(1094): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ADC0=R3
                 	.DEF _ADC0_msb=R4
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R5
                 	.DEF __lcd_maxx=R8
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x0:
000034 4345
000035 2054
000036 6553
000037 736e      	.DB  0x45,0x43,0x54,0x20,0x53,0x65,0x6E,0x73
000038 726f
000039 5400
00003a 6d65
00003b 3a70      	.DB  0x6F,0x72,0x0,0x54,0x65,0x6D,0x70,0x3A
00003c 6f00
00003d 0043      	.DB  0x0,0x6F,0x43,0x0
                 _0x2000003:
00003e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003f 000b      	.DW  0x0B
000040 0300      	.DW  _0x6
000041 0068      	.DW  _0x0*2
                 
000042 0006      	.DW  0x06
000043 030b      	.DW  _0x6+11
000044 0073      	.DW  _0x0*2+11
                 
000045 0003      	.DW  0x03
000046 0311      	.DW  _0x6+17
000047 0079      	.DW  _0x0*2+17
                 
000048 0002      	.DW  0x02
000049 0318      	.DW  __base_y_G100
00004a 007c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bff5      	OUT  MCUCR,R31
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e0a0      	LDI  R26,LOW(__SRAM_START)
00005b e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005c 93ed      	ST   X+,R30
00005d 9701      	SBIW R24,1
00005e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005f e7ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000060 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000061 9185      	LPM  R24,Z+
000062 9195      	LPM  R25,Z+
000063 9700      	SBIW R24,0
000064 f061      	BREQ __GLOBAL_INI_END
000065 91a5      	LPM  R26,Z+
000066 91b5      	LPM  R27,Z+
000067 9005      	LPM  R0,Z+
000068 9015      	LPM  R1,Z+
000069 01bf      	MOVW R22,R30
00006a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006b 9005      	LPM  R0,Z+
00006c 920d      	ST   X+,R0
00006d 9701      	SBIW R24,1
00006e f7e1      	BRNE __GLOBAL_INI_LOOP
00006f 01fb      	MOVW R30,R22
000070 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000071 e0e0      	LDI  R30,__GPIOR0_INIT
000072 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 0097 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdint.h>
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
                 ;void Display_Value(unsigned int number);
                 ;float Analog_to_Temp(unsigned int val);
                 ;float map(uint16_t input, uint16_t in_min,
                 ; 0000 000A  uint16_t in_max, uint16_t out_min, uint16_t out_max);
                 ;unsigned int ADC0;
                 ;float Temp = 0;
                 ;//unsigned int adc_value;
                 ;//float voltage, temperature;
                 ;unsigned int read_adc(unsigned char adc_input){
                 ; 0000 000F unsigned int read_adc(unsigned char adc_input){
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0010     ADMUX=adc_input | ADC_VREF_TYPE;
00007b 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00007c 81e8      	LD   R30,Y
00007d 64e0      	ORI  R30,0x40
00007e 93e0 007c 	STS  124,R30
                 ; 0000 0011     delay_us(10);
                +
000080 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000081 958a     +DEC R24
000082 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0012     // Start the AD conversion
                 ; 0000 0013     ADCSRA|=(1<<ADSC);
000083 91e0 007a 	LDS  R30,122
000085 64e0      	ORI  R30,0x40
000086 93e0 007a 	STS  122,R30
                 ; 0000 0014     // Wait for the AD conversion to complete
                 ; 0000 0015     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
000088 91e0 007a 	LDS  R30,122
00008a 71e0      	ANDI R30,LOW(0x10)
00008b f3e1      	BREQ _0x3
                 ; 0000 0016     ADCSRA|=(1<<ADIF);
00008c 91e0 007a 	LDS  R30,122
00008e 61e0      	ORI  R30,0x10
00008f 93e0 007a 	STS  122,R30
                 ; 0000 0017     return ADCW;
000091 91e0 0078 	LDS  R30,120
000093 91f0 0079 	LDS  R31,120+1
000095 940c 02f2 	JMP  _0x2020001
                 ; 0000 0018 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 001A {
                 _main:
                 ; .FSTART _main
                 ; 0000 001B     #pragma optsize-
                 ; 0000 001C     CLKPR=(1<<CLKPCE);
000097 e8e0      	LDI  R30,LOW(128)
000098 93e0 0061 	STS  97,R30
                 ; 0000 001D     CLKPR=0x00;
00009a e0e0      	LDI  R30,LOW(0)
00009b 93e0 0061 	STS  97,R30
                 ; 0000 001E     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 001F     #pragma optsize+
                 ; 0000 0020     #endif
                 ; 0000 0021     // ADC initialization
                 ; 0000 0022     ADMUX=ADC_VREF_TYPE;
00009d e4e0      	LDI  R30,LOW(64)
00009e 93e0 007c 	STS  124,R30
                 ; 0000 0023     ADCSRA=(1<<ADEN)|(1<<ADATE)|(0<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
0000a0 eae3      	LDI  R30,LOW(163)
0000a1 93e0 007a 	STS  122,R30
                 ; 0000 0024     ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 93e0 007b 	STS  123,R30
                 ; 0000 0025     lcd_init(16);
0000a6 e1a0      	LDI  R26,LOW(16)
0000a7 940e 02c8 	CALL _lcd_init
                 ; 0000 0026     lcd_gotoxy(3,0);
0000a9 e0e3      	LDI  R30,LOW(3)
0000aa 93ea      	ST   -Y,R30
0000ab e0a0      	LDI  R26,LOW(0)
0000ac 940e 028b 	CALL _lcd_gotoxy
                 ; 0000 0027     lcd_puts("ECT Sensor");
                +
0000ae e0a0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000af e0b3     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000b0 940e 02b7 	CALL _lcd_puts
                 ; 0000 0028     lcd_gotoxy(4,1);
0000b2 e0e4      	LDI  R30,LOW(4)
0000b3 940e 02f4 	CALL SUBOPT_0x0
                 ; 0000 0029     lcd_puts("Temp:");
                +
0000b5 e0ab     +LDI R26 , LOW ( _0x6 + ( 11 ) )
0000b6 e0b3     +LDI R27 , HIGH ( _0x6 + ( 11 ) )
                 	__POINTW2MN _0x6,11
0000b7 940e 02b7 	CALL _lcd_puts
                 ; 0000 002A     while (1)
                 _0x7:
                 ; 0000 002B     {
                 ; 0000 002C         ADC0 = read_adc(0);
0000b9 e0a0      	LDI  R26,LOW(0)
0000ba dfc0      	RCALL _read_adc
                +
0000bb 2e3e     +MOV R3 , R30
0000bc 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 002D         Temp = Analog_to_Temp(ADC0);
                +
0000bd 2da3     +MOV R26 , R3
0000be 2db4     +MOV R27 , R4
                 	__GETW2R 3,4
0000bf d046      	RCALL _Analog_to_Temp
0000c0 93e0 0314 	STS  _Temp,R30
0000c2 93f0 0315 	STS  _Temp+1,R31
0000c4 9360 0316 	STS  _Temp+2,R22
0000c6 9370 0317 	STS  _Temp+3,R23
                 ; 0000 002E 
                 ; 0000 002F         lcd_gotoxy(9,1);
0000c8 e0e9      	LDI  R30,LOW(9)
0000c9 940e 02f4 	CALL SUBOPT_0x0
                 ; 0000 0030         Display_Value((unsigned int)(Temp));
0000cb 91e0 0314 	LDS  R30,_Temp
0000cd 91f0 0315 	LDS  R31,_Temp+1
0000cf 9160 0316 	LDS  R22,_Temp+2
0000d1 9170 0317 	LDS  R23,_Temp+3
0000d3 940e 032d 	CALL __CFD1U
0000d5 01df      	MOVW R26,R30
0000d6 d162      	RCALL _Display_Value
                 ; 0000 0031         lcd_gotoxy(11,1);
0000d7 e0eb      	LDI  R30,LOW(11)
0000d8 940e 02f4 	CALL SUBOPT_0x0
                 ; 0000 0032         lcd_puts("oC");
                +
0000da e1a1     +LDI R26 , LOW ( _0x6 + ( 17 ) )
0000db e0b3     +LDI R27 , HIGH ( _0x6 + ( 17 ) )
                 	__POINTW2MN _0x6,17
0000dc 940e 02b7 	CALL _lcd_puts
                 ; 0000 0033     }
0000de cfda      	RJMP _0x7
                 ; 0000 0034 }
                 _0xA:
0000df cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
000300           	.BYTE 0x14
                 ;float map(uint16_t input, uint16_t in_min,
                 ; 0000 0036  uint16_t in_max, uint16_t out_min, uint16_t out_max){
                 
                 	.CSEG
                 _map:
                 ; .FSTART _map
                 ; 0000 0037     return ((input - in_min) * (out_max - out_min))
0000e0 93ba      	ST   -Y,R27
0000e1 93aa      	ST   -Y,R26
                 ;	input -> Y+8
                 ;	in_min -> Y+6
                 ;	in_max -> Y+4
                 ;	out_min -> Y+2
                 ;	out_max -> Y+0
                 ; 0000 0038     / (in_max - in_min) + out_min;
0000e2 81ae      	LDD  R26,Y+6
0000e3 81bf      	LDD  R27,Y+6+1
0000e4 85e8      	LDD  R30,Y+8
0000e5 85f9      	LDD  R31,Y+8+1
0000e6 1bea      	SUB  R30,R26
0000e7 0bfb      	SBC  R31,R27
0000e8 010f      	MOVW R0,R30
0000e9 81aa      	LDD  R26,Y+2
0000ea 81bb      	LDD  R27,Y+2+1
0000eb 81e8      	LD   R30,Y
0000ec 81f9      	LDD  R31,Y+1
0000ed 1bea      	SUB  R30,R26
0000ee 0bfb      	SBC  R31,R27
0000ef 01d0      	MOVW R26,R0
0000f0 940e 03a1 	CALL __MULW12U
0000f2 010f      	MOVW R0,R30
0000f3 81ae      	LDD  R26,Y+6
0000f4 81bf      	LDD  R27,Y+6+1
0000f5 81ec      	LDD  R30,Y+4
0000f6 81fd      	LDD  R31,Y+4+1
0000f7 1bea      	SUB  R30,R26
0000f8 0bfb      	SBC  R31,R27
0000f9 01d0      	MOVW R26,R0
0000fa 940e 03a9 	CALL __DIVW21U
0000fc 81aa      	LDD  R26,Y+2
0000fd 81bb      	LDD  R27,Y+2+1
0000fe 0fea      	ADD  R30,R26
0000ff 1ffb      	ADC  R31,R27
000100 2766      	CLR  R22
000101 2777      	CLR  R23
000102 940e 0366 	CALL __CDF1
000104 962a      	ADIW R28,10
000105 9508      	RET
                 ; 0000 0039 }
                 ; .FEND
                 ;float Analog_to_Temp(unsigned int val){
                 ; 0000 003A float Analog_to_Temp(unsigned int val){
                 _Analog_to_Temp:
                 ; .FSTART _Analog_to_Temp
                 ; 0000 003B     if(val >= 330 && val <= 415){
000106 93ba      	ST   -Y,R27
000107 93aa      	ST   -Y,R26
                 ;	val -> Y+0
000108 81a8      	LD   R26,Y
000109 81b9      	LDD  R27,Y+1
00010a 34aa      	CPI  R26,LOW(0x14A)
00010b e0e1      	LDI  R30,HIGH(0x14A)
00010c 07be      	CPC  R27,R30
00010d f020      	BRLO _0xC
00010e 3aa0      	CPI  R26,LOW(0x1A0)
00010f e0e1      	LDI  R30,HIGH(0x1A0)
000110 07be      	CPC  R27,R30
000111 f008      	BRLO _0xD
                 _0xC:
000112 c012      	RJMP _0xB
                 _0xD:
                 ; 0000 003C         return map(val, 330, 415, 18, 25);
000113 940e 02f7 	CALL SUBOPT_0x1
000115 e4ea      	LDI  R30,LOW(330)
000116 e0f1      	LDI  R31,HIGH(330)
000117 93fa      	ST   -Y,R31
000118 93ea      	ST   -Y,R30
000119 e9ef      	LDI  R30,LOW(415)
00011a e0f1      	LDI  R31,HIGH(415)
00011b 93fa      	ST   -Y,R31
00011c 93ea      	ST   -Y,R30
00011d e1e2      	LDI  R30,LOW(18)
00011e e0f0      	LDI  R31,HIGH(18)
00011f 93fa      	ST   -Y,R31
000120 93ea      	ST   -Y,R30
000121 e1a9      	LDI  R26,LOW(25)
000122 e0b0      	LDI  R27,0
000123 dfbc      	RCALL _map
000124 c171      	RJMP _0x2020002
                 ; 0000 003D     }
                 ; 0000 003E     else if(val > 415 && val <= 450){
                 _0xB:
000125 81a8      	LD   R26,Y
000126 81b9      	LDD  R27,Y+1
000127 3aa0      	CPI  R26,LOW(0x1A0)
000128 e0e1      	LDI  R30,HIGH(0x1A0)
000129 07be      	CPC  R27,R30
00012a f020      	BRLO _0x10
00012b 3ca3      	CPI  R26,LOW(0x1C3)
00012c e0e1      	LDI  R30,HIGH(0x1C3)
00012d 07be      	CPC  R27,R30
00012e f008      	BRLO _0x11
                 _0x10:
00012f c012      	RJMP _0xF
                 _0x11:
                 ; 0000 003F         return map(val, 415, 450, 25, 29);
000130 940e 02f7 	CALL SUBOPT_0x1
000132 e9ef      	LDI  R30,LOW(415)
000133 e0f1      	LDI  R31,HIGH(415)
000134 93fa      	ST   -Y,R31
000135 93ea      	ST   -Y,R30
000136 ece2      	LDI  R30,LOW(450)
000137 e0f1      	LDI  R31,HIGH(450)
000138 93fa      	ST   -Y,R31
000139 93ea      	ST   -Y,R30
00013a e1e9      	LDI  R30,LOW(25)
00013b e0f0      	LDI  R31,HIGH(25)
00013c 93fa      	ST   -Y,R31
00013d 93ea      	ST   -Y,R30
00013e e1ad      	LDI  R26,LOW(29)
00013f e0b0      	LDI  R27,0
000140 df9f      	RCALL _map
000141 c154      	RJMP _0x2020002
                 ; 0000 0040     }
                 ; 0000 0041     else if(val > 450 && val <= 490){
                 _0xF:
000142 81a8      	LD   R26,Y
000143 81b9      	LDD  R27,Y+1
000144 3ca3      	CPI  R26,LOW(0x1C3)
000145 e0e1      	LDI  R30,HIGH(0x1C3)
000146 07be      	CPC  R27,R30
000147 f020      	BRLO _0x14
000148 3eab      	CPI  R26,LOW(0x1EB)
000149 e0e1      	LDI  R30,HIGH(0x1EB)
00014a 07be      	CPC  R27,R30
00014b f008      	BRLO _0x15
                 _0x14:
00014c c011      	RJMP _0x13
                 _0x15:
                 ; 0000 0042         return map(val, 450, 490, 29, 35);
00014d d1a9      	RCALL SUBOPT_0x1
00014e ece2      	LDI  R30,LOW(450)
00014f e0f1      	LDI  R31,HIGH(450)
000150 93fa      	ST   -Y,R31
000151 93ea      	ST   -Y,R30
000152 eeea      	LDI  R30,LOW(490)
000153 e0f1      	LDI  R31,HIGH(490)
000154 93fa      	ST   -Y,R31
000155 93ea      	ST   -Y,R30
000156 e1ed      	LDI  R30,LOW(29)
000157 e0f0      	LDI  R31,HIGH(29)
000158 93fa      	ST   -Y,R31
000159 93ea      	ST   -Y,R30
00015a e2a3      	LDI  R26,LOW(35)
00015b e0b0      	LDI  R27,0
00015c df83      	RCALL _map
00015d c138      	RJMP _0x2020002
                 ; 0000 0043     }
                 ; 0000 0044     else if(val > 490 && val <= 550){
                 _0x13:
00015e 81a8      	LD   R26,Y
00015f 81b9      	LDD  R27,Y+1
000160 3eab      	CPI  R26,LOW(0x1EB)
000161 e0e1      	LDI  R30,HIGH(0x1EB)
000162 07be      	CPC  R27,R30
000163 f020      	BRLO _0x18
000164 32a7      	CPI  R26,LOW(0x227)
000165 e0e2      	LDI  R30,HIGH(0x227)
000166 07be      	CPC  R27,R30
000167 f008      	BRLO _0x19
                 _0x18:
000168 c011      	RJMP _0x17
                 _0x19:
                 ; 0000 0045         return map(val, 490, 550, 35, 40);
000169 d18d      	RCALL SUBOPT_0x1
00016a eeea      	LDI  R30,LOW(490)
00016b e0f1      	LDI  R31,HIGH(490)
00016c 93fa      	ST   -Y,R31
00016d 93ea      	ST   -Y,R30
00016e e2e6      	LDI  R30,LOW(550)
00016f e0f2      	LDI  R31,HIGH(550)
000170 93fa      	ST   -Y,R31
000171 93ea      	ST   -Y,R30
000172 e2e3      	LDI  R30,LOW(35)
000173 e0f0      	LDI  R31,HIGH(35)
000174 93fa      	ST   -Y,R31
000175 93ea      	ST   -Y,R30
000176 e2a8      	LDI  R26,LOW(40)
000177 e0b0      	LDI  R27,0
000178 df67      	RCALL _map
000179 c11c      	RJMP _0x2020002
                 ; 0000 0046     }
                 ; 0000 0047     else if(val > 550 && val <= 620){
                 _0x17:
00017a 81a8      	LD   R26,Y
00017b 81b9      	LDD  R27,Y+1
00017c 32a7      	CPI  R26,LOW(0x227)
00017d e0e2      	LDI  R30,HIGH(0x227)
00017e 07be      	CPC  R27,R30
00017f f020      	BRLO _0x1C
000180 36ad      	CPI  R26,LOW(0x26D)
000181 e0e2      	LDI  R30,HIGH(0x26D)
000182 07be      	CPC  R27,R30
000183 f008      	BRLO _0x1D
                 _0x1C:
000184 c011      	RJMP _0x1B
                 _0x1D:
                 ; 0000 0048         return map(val, 550, 620, 40, 46);
000185 d171      	RCALL SUBOPT_0x1
000186 e2e6      	LDI  R30,LOW(550)
000187 e0f2      	LDI  R31,HIGH(550)
000188 93fa      	ST   -Y,R31
000189 93ea      	ST   -Y,R30
00018a e6ec      	LDI  R30,LOW(620)
00018b e0f2      	LDI  R31,HIGH(620)
00018c 93fa      	ST   -Y,R31
00018d 93ea      	ST   -Y,R30
00018e e2e8      	LDI  R30,LOW(40)
00018f e0f0      	LDI  R31,HIGH(40)
000190 93fa      	ST   -Y,R31
000191 93ea      	ST   -Y,R30
000192 e2ae      	LDI  R26,LOW(46)
000193 e0b0      	LDI  R27,0
000194 df4b      	RCALL _map
000195 c100      	RJMP _0x2020002
                 ; 0000 0049     }
                 ; 0000 004A     else if(val > 620 && val <= 665){
                 _0x1B:
000196 81a8      	LD   R26,Y
000197 81b9      	LDD  R27,Y+1
000198 36ad      	CPI  R26,LOW(0x26D)
000199 e0e2      	LDI  R30,HIGH(0x26D)
00019a 07be      	CPC  R27,R30
00019b f020      	BRLO _0x20
00019c 39aa      	CPI  R26,LOW(0x29A)
00019d e0e2      	LDI  R30,HIGH(0x29A)
00019e 07be      	CPC  R27,R30
00019f f008      	BRLO _0x21
                 _0x20:
0001a0 c011      	RJMP _0x1F
                 _0x21:
                 ; 0000 004B         return map(val, 620, 665, 46, 51);
0001a1 d155      	RCALL SUBOPT_0x1
0001a2 e6ec      	LDI  R30,LOW(620)
0001a3 e0f2      	LDI  R31,HIGH(620)
0001a4 93fa      	ST   -Y,R31
0001a5 93ea      	ST   -Y,R30
0001a6 e9e9      	LDI  R30,LOW(665)
0001a7 e0f2      	LDI  R31,HIGH(665)
0001a8 93fa      	ST   -Y,R31
0001a9 93ea      	ST   -Y,R30
0001aa e2ee      	LDI  R30,LOW(46)
0001ab e0f0      	LDI  R31,HIGH(46)
0001ac 93fa      	ST   -Y,R31
0001ad 93ea      	ST   -Y,R30
0001ae e3a3      	LDI  R26,LOW(51)
0001af e0b0      	LDI  R27,0
0001b0 df2f      	RCALL _map
0001b1 c0e4      	RJMP _0x2020002
                 ; 0000 004C     }
                 ; 0000 004D     else if(val > 670 && val <= 760){
                 _0x1F:
0001b2 81a8      	LD   R26,Y
0001b3 81b9      	LDD  R27,Y+1
0001b4 39af      	CPI  R26,LOW(0x29F)
0001b5 e0e2      	LDI  R30,HIGH(0x29F)
0001b6 07be      	CPC  R27,R30
0001b7 f020      	BRLO _0x24
0001b8 3fa9      	CPI  R26,LOW(0x2F9)
0001b9 e0e2      	LDI  R30,HIGH(0x2F9)
0001ba 07be      	CPC  R27,R30
0001bb f008      	BRLO _0x25
                 _0x24:
0001bc c011      	RJMP _0x23
                 _0x25:
                 ; 0000 004E         return map(val, 665, 707, 51, 60);
0001bd d139      	RCALL SUBOPT_0x1
0001be e9e9      	LDI  R30,LOW(665)
0001bf e0f2      	LDI  R31,HIGH(665)
0001c0 93fa      	ST   -Y,R31
0001c1 93ea      	ST   -Y,R30
0001c2 ece3      	LDI  R30,LOW(707)
0001c3 e0f2      	LDI  R31,HIGH(707)
0001c4 93fa      	ST   -Y,R31
0001c5 93ea      	ST   -Y,R30
0001c6 e3e3      	LDI  R30,LOW(51)
0001c7 e0f0      	LDI  R31,HIGH(51)
0001c8 93fa      	ST   -Y,R31
0001c9 93ea      	ST   -Y,R30
0001ca e3ac      	LDI  R26,LOW(60)
0001cb e0b0      	LDI  R27,0
0001cc df13      	RCALL _map
0001cd c0c8      	RJMP _0x2020002
                 ; 0000 004F     }
                 ; 0000 0050     else if(val > 760 && val <= 805){
                 _0x23:
0001ce 81a8      	LD   R26,Y
0001cf 81b9      	LDD  R27,Y+1
0001d0 3fa9      	CPI  R26,LOW(0x2F9)
0001d1 e0e2      	LDI  R30,HIGH(0x2F9)
0001d2 07be      	CPC  R27,R30
0001d3 f020      	BRLO _0x28
0001d4 32a6      	CPI  R26,LOW(0x326)
0001d5 e0e3      	LDI  R30,HIGH(0x326)
0001d6 07be      	CPC  R27,R30
0001d7 f008      	BRLO _0x29
                 _0x28:
0001d8 c011      	RJMP _0x27
                 _0x29:
                 ; 0000 0051         return map(val, 760, 805, 60, 65);
0001d9 d11d      	RCALL SUBOPT_0x1
0001da efe8      	LDI  R30,LOW(760)
0001db e0f2      	LDI  R31,HIGH(760)
0001dc 93fa      	ST   -Y,R31
0001dd 93ea      	ST   -Y,R30
0001de e2e5      	LDI  R30,LOW(805)
0001df e0f3      	LDI  R31,HIGH(805)
0001e0 93fa      	ST   -Y,R31
0001e1 93ea      	ST   -Y,R30
0001e2 e3ec      	LDI  R30,LOW(60)
0001e3 e0f0      	LDI  R31,HIGH(60)
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
0001e6 e4a1      	LDI  R26,LOW(65)
0001e7 e0b0      	LDI  R27,0
0001e8 def7      	RCALL _map
0001e9 c0ac      	RJMP _0x2020002
                 ; 0000 0052     }
                 ; 0000 0053     else if(val > 805 && val <= 840){
                 _0x27:
0001ea 81a8      	LD   R26,Y
0001eb 81b9      	LDD  R27,Y+1
0001ec 32a6      	CPI  R26,LOW(0x326)
0001ed e0e3      	LDI  R30,HIGH(0x326)
0001ee 07be      	CPC  R27,R30
0001ef f020      	BRLO _0x2C
0001f0 34a9      	CPI  R26,LOW(0x349)
0001f1 e0e3      	LDI  R30,HIGH(0x349)
0001f2 07be      	CPC  R27,R30
0001f3 f008      	BRLO _0x2D
                 _0x2C:
0001f4 c011      	RJMP _0x2B
                 _0x2D:
                 ; 0000 0054         return map(val, 805, 840, 65, 70);
0001f5 d101      	RCALL SUBOPT_0x1
0001f6 e2e5      	LDI  R30,LOW(805)
0001f7 e0f3      	LDI  R31,HIGH(805)
0001f8 93fa      	ST   -Y,R31
0001f9 93ea      	ST   -Y,R30
0001fa e4e8      	LDI  R30,LOW(840)
0001fb e0f3      	LDI  R31,HIGH(840)
0001fc 93fa      	ST   -Y,R31
0001fd 93ea      	ST   -Y,R30
0001fe e4e1      	LDI  R30,LOW(65)
0001ff e0f0      	LDI  R31,HIGH(65)
000200 93fa      	ST   -Y,R31
000201 93ea      	ST   -Y,R30
000202 e4a6      	LDI  R26,LOW(70)
000203 e0b0      	LDI  R27,0
000204 dedb      	RCALL _map
000205 c090      	RJMP _0x2020002
                 ; 0000 0055     }
                 ; 0000 0056     else if(val > 840 && val <= 862){
                 _0x2B:
000206 81a8      	LD   R26,Y
000207 81b9      	LDD  R27,Y+1
000208 34a9      	CPI  R26,LOW(0x349)
000209 e0e3      	LDI  R30,HIGH(0x349)
00020a 07be      	CPC  R27,R30
00020b f020      	BRLO _0x30
00020c 35af      	CPI  R26,LOW(0x35F)
00020d e0e3      	LDI  R30,HIGH(0x35F)
00020e 07be      	CPC  R27,R30
00020f f008      	BRLO _0x31
                 _0x30:
000210 c011      	RJMP _0x2F
                 _0x31:
                 ; 0000 0057         return map(val, 840, 855, 70, 74);
000211 d0e5      	RCALL SUBOPT_0x1
000212 e4e8      	LDI  R30,LOW(840)
000213 e0f3      	LDI  R31,HIGH(840)
000214 93fa      	ST   -Y,R31
000215 93ea      	ST   -Y,R30
000216 e5e7      	LDI  R30,LOW(855)
000217 e0f3      	LDI  R31,HIGH(855)
000218 93fa      	ST   -Y,R31
000219 93ea      	ST   -Y,R30
00021a e4e6      	LDI  R30,LOW(70)
00021b e0f0      	LDI  R31,HIGH(70)
00021c 93fa      	ST   -Y,R31
00021d 93ea      	ST   -Y,R30
00021e e4aa      	LDI  R26,LOW(74)
00021f e0b0      	LDI  R27,0
000220 debf      	RCALL _map
000221 c074      	RJMP _0x2020002
                 ; 0000 0058     }
                 ; 0000 0059     else if(val > 862){
                 _0x2F:
000222 81a8      	LD   R26,Y
000223 81b9      	LDD  R27,Y+1
000224 35af      	CPI  R26,LOW(0x35F)
000225 e0e3      	LDI  R30,HIGH(0x35F)
000226 07be      	CPC  R27,R30
000227 f028      	BRLO _0x33
                 ; 0000 005A         return 75;
                +
000228 e0e0     +LDI R30 , LOW ( 0x42960000 )
000229 e0f0     +LDI R31 , HIGH ( 0x42960000 )
00022a e966     +LDI R22 , BYTE3 ( 0x42960000 )
00022b e472     +LDI R23 , BYTE4 ( 0x42960000 )
                 	__GETD1N 0x42960000
00022c c069      	RJMP _0x2020002
                 ; 0000 005B     }
                 ; 0000 005C     else if(val < 330){
                 _0x33:
00022d 81a8      	LD   R26,Y
00022e 81b9      	LDD  R27,Y+1
00022f 34aa      	CPI  R26,LOW(0x14A)
000230 e0e1      	LDI  R30,HIGH(0x14A)
000231 07be      	CPC  R27,R30
000232 f428      	BRSH _0x35
                 ; 0000 005D         return 17;
                +
000233 e0e0     +LDI R30 , LOW ( 0x41880000 )
000234 e0f0     +LDI R31 , HIGH ( 0x41880000 )
000235 e868     +LDI R22 , BYTE3 ( 0x41880000 )
000236 e471     +LDI R23 , BYTE4 ( 0x41880000 )
                 	__GETD1N 0x41880000
000237 c05e      	RJMP _0x2020002
                 ; 0000 005E     }
                 ; 0000 005F }
                 _0x35:
000238 c05d      	RJMP _0x2020002
                 ; .FEND
                 ;void Display_Value(unsigned int number)
                 ; 0000 0061 {
                 _Display_Value:
                 ; .FSTART _Display_Value
                 ; 0000 0062     unsigned int chuc,donvi;
                 ; 0000 0063     chuc = (number/10)%10;
000239 93ba      	ST   -Y,R27
00023a 93aa      	ST   -Y,R26
00023b 940e 03bf 	CALL __SAVELOCR4
                 ;	number -> Y+4
                 ;	chuc -> R16,R17
                 ;	donvi -> R18,R19
00023d 81ac      	LDD  R26,Y+4
00023e 81bd      	LDD  R27,Y+4+1
00023f e0ea      	LDI  R30,LOW(10)
000240 e0f0      	LDI  R31,HIGH(10)
000241 940e 03a9 	CALL __DIVW21U
000243 01df      	MOVW R26,R30
000244 e0ea      	LDI  R30,LOW(10)
000245 e0f0      	LDI  R31,HIGH(10)
000246 940e 03bc 	CALL __MODW21U
000248 018f      	MOVW R16,R30
                 ; 0000 0064     donvi = number%10;
000249 81ac      	LDD  R26,Y+4
00024a 81bd      	LDD  R27,Y+4+1
00024b e0ea      	LDI  R30,LOW(10)
00024c e0f0      	LDI  R31,HIGH(10)
00024d 940e 03bc 	CALL __MODW21U
00024f 019f      	MOVW R18,R30
                 ; 0000 0065     lcd_putchar(chuc+48);
000250 2fa0      	MOV  R26,R16
000251 5da0      	SUBI R26,-LOW(48)
000252 d04f      	RCALL _lcd_putchar
                 ; 0000 0066     lcd_putchar(donvi+48);
000253 2fa2      	MOV  R26,R18
000254 5da0      	SUBI R26,-LOW(48)
000255 d04c      	RCALL _lcd_putchar
                 ; 0000 0067 }
000256 940e 03c4 	CALL __LOADLOCR4
000258 9626      	ADIW R28,6
000259 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00025a 93aa      	ST   -Y,R26
00025b 81e8      	LD   R30,Y
00025c 71e0      	ANDI R30,LOW(0x10)
00025d f011      	BREQ _0x2000004
00025e 9a5b      	SBI  0xB,3
00025f c001      	RJMP _0x2000005
                 _0x2000004:
000260 985b      	CBI  0xB,3
                 _0x2000005:
000261 81e8      	LD   R30,Y
000262 72e0      	ANDI R30,LOW(0x20)
000263 f011      	BREQ _0x2000006
000264 9a5a      	SBI  0xB,2
000265 c001      	RJMP _0x2000007
                 _0x2000006:
000266 985a      	CBI  0xB,2
                 _0x2000007:
000267 81e8      	LD   R30,Y
000268 74e0      	ANDI R30,LOW(0x40)
000269 f011      	BREQ _0x2000008
00026a 9a59      	SBI  0xB,1
00026b c001      	RJMP _0x2000009
                 _0x2000008:
00026c 9859      	CBI  0xB,1
                 _0x2000009:
00026d 81e8      	LD   R30,Y
00026e 78e0      	ANDI R30,LOW(0x80)
00026f f011      	BREQ _0x200000A
000270 9a58      	SBI  0xB,0
000271 c001      	RJMP _0x200000B
                 _0x200000A:
000272 9858      	CBI  0xB,0
                 _0x200000B:
                +
000273 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000274 958a     +DEC R24
000275 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000276 9a5c      	SBI  0xB,4
                +
000277 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000278 958a     +DEC R24
000279 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00027a 985c      	CBI  0xB,4
                +
00027b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00027c 958a     +DEC R24
00027d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00027e c073      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00027f 93aa      	ST   -Y,R26
000280 81a8      	LD   R26,Y
000281 dfd8      	RCALL __lcd_write_nibble_G100
000282 81e8          ld    r30,y
000283 95e2          swap  r30
000284 83e8          st    y,r30
000285 81a8      	LD   R26,Y
000286 dfd3      	RCALL __lcd_write_nibble_G100
                +
000287 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000288 958a     +DEC R24
000289 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00028a c067      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00028b 93aa      	ST   -Y,R26
00028c 81e8      	LD   R30,Y
00028d e0f0      	LDI  R31,0
00028e 5ee8      	SUBI R30,LOW(-__base_y_G100)
00028f 4ffc      	SBCI R31,HIGH(-__base_y_G100)
000290 81e0      	LD   R30,Z
000291 81a9      	LDD  R26,Y+1
000292 0fae      	ADD  R26,R30
000293 dfeb      	RCALL __lcd_write_data
000294 8069      	LDD  R6,Y+1
000295 8058      	LDD  R5,Y+0
                 _0x2020002:
000296 9622      	ADIW R28,2
000297 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000298 e0a2      	LDI  R26,LOW(2)
000299 d062      	RCALL SUBOPT_0x2
00029a e0ac      	LDI  R26,LOW(12)
00029b dfe3      	RCALL __lcd_write_data
00029c e0a1      	LDI  R26,LOW(1)
00029d d05e      	RCALL SUBOPT_0x2
00029e e0e0      	LDI  R30,LOW(0)
00029f 2e5e      	MOV  R5,R30
0002a0 2e6e      	MOV  R6,R30
0002a1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002a2 93aa      	ST   -Y,R26
0002a3 81a8      	LD   R26,Y
0002a4 30aa      	CPI  R26,LOW(0xA)
0002a5 f011      	BREQ _0x2000011
0002a6 1468      	CP   R6,R8
0002a7 f048      	BRLO _0x2000010
                 _0x2000011:
0002a8 e0e0      	LDI  R30,LOW(0)
0002a9 93ea      	ST   -Y,R30
0002aa 9453      	INC  R5
0002ab 2da5      	MOV  R26,R5
0002ac dfde      	RCALL _lcd_gotoxy
0002ad 81a8      	LD   R26,Y
0002ae 30aa      	CPI  R26,LOW(0xA)
0002af f409      	BRNE _0x2000013
0002b0 c041      	RJMP _0x2020001
                 _0x2000013:
                 _0x2000010:
0002b1 9463      	INC  R6
0002b2 9a5e      	SBI  0xB,6
0002b3 81a8      	LD   R26,Y
0002b4 dfca      	RCALL __lcd_write_data
0002b5 985e      	CBI  0xB,6
0002b6 c03b      	RJMP _0x2020001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002b7 93ba      	ST   -Y,R27
0002b8 93aa      	ST   -Y,R26
0002b9 931a      	ST   -Y,R17
                 _0x2000014:
0002ba 81a9      	LDD  R26,Y+1
0002bb 81ba      	LDD  R27,Y+1+1
0002bc 91ed      	LD   R30,X+
0002bd 83a9      	STD  Y+1,R26
0002be 83ba      	STD  Y+1+1,R27
0002bf 2f1e      	MOV  R17,R30
0002c0 30e0      	CPI  R30,0
0002c1 f019      	BREQ _0x2000016
0002c2 2fa1      	MOV  R26,R17
0002c3 dfde      	RCALL _lcd_putchar
0002c4 cff5      	RJMP _0x2000014
                 _0x2000016:
0002c5 8118      	LDD  R17,Y+0
0002c6 9623      	ADIW R28,3
0002c7 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002c8 93aa      	ST   -Y,R26
0002c9 9a53      	SBI  0xA,3
0002ca 9a52      	SBI  0xA,2
0002cb 9a51      	SBI  0xA,1
0002cc 9a50      	SBI  0xA,0
0002cd 9a54      	SBI  0xA,4
0002ce 9a56      	SBI  0xA,6
0002cf 9a55      	SBI  0xA,5
0002d0 985c      	CBI  0xB,4
0002d1 985e      	CBI  0xB,6
0002d2 985d      	CBI  0xB,5
0002d3 8088      	LDD  R8,Y+0
0002d4 81e8      	LD   R30,Y
0002d5 58e0      	SUBI R30,-LOW(128)
                +
0002d6 93e0 031a+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002d8 81e8      	LD   R30,Y
0002d9 54e0      	SUBI R30,-LOW(192)
                +
0002da 93e0 031b+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002dc e1a4      	LDI  R26,LOW(20)
0002dd e0b0      	LDI  R27,0
0002de 940e 0308 	CALL _delay_ms
0002e0 d020      	RCALL SUBOPT_0x3
0002e1 d01f      	RCALL SUBOPT_0x3
0002e2 d01e      	RCALL SUBOPT_0x3
0002e3 e2a0      	LDI  R26,LOW(32)
0002e4 df75      	RCALL __lcd_write_nibble_G100
                +
0002e5 ec88     +LDI R24 , LOW ( 200 )
0002e6 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002e7 9701     +SBIW R24 , 1
0002e8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002e9 e2a8      	LDI  R26,LOW(40)
0002ea df94      	RCALL __lcd_write_data
0002eb e0a4      	LDI  R26,LOW(4)
0002ec df92      	RCALL __lcd_write_data
0002ed e8a5      	LDI  R26,LOW(133)
0002ee df90      	RCALL __lcd_write_data
0002ef e0a6      	LDI  R26,LOW(6)
0002f0 df8e      	RCALL __lcd_write_data
0002f1 dfa6      	RCALL _lcd_clear
                 _0x2020001:
0002f2 9621      	ADIW R28,1
0002f3 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _Temp:
000314           	.BYTE 0x4
                 __base_y_G100:
000318           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0002f4 93ea      	ST   -Y,R30
0002f5 e0a1      	LDI  R26,LOW(1)
0002f6 cf94      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
0002f7 81e8      	LD   R30,Y
0002f8 81f9      	LDD  R31,Y+1
0002f9 93fa      	ST   -Y,R31
0002fa 93ea      	ST   -Y,R30
0002fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0002fc df82      	RCALL __lcd_write_data
0002fd e0a3      	LDI  R26,LOW(3)
0002fe e0b0      	LDI  R27,0
0002ff 940c 0308 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000301 e3a0      	LDI  R26,LOW(48)
000302 df57      	RCALL __lcd_write_nibble_G100
                +
000303 ec88     +LDI R24 , LOW ( 200 )
000304 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000305 9701     +SBIW R24 , 1
000306 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000307 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000308 9610      	adiw r26,0
000309 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00030a ed80     +LDI R24 , LOW ( 0x7D0 )
00030b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00030c 9701     +SBIW R24 , 1
00030d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00030e 95a8      	wdr
00030f 9711      	sbiw r26,1
000310 f7c9      	brne __delay_ms0
                 __delay_ms1:
000311 9508      	ret
                 
                 __REPACK:
000312 e850      	LDI  R21,0x80
000313 2757      	EOR  R21,R23
000314 f411      	BRNE __REPACK0
000315 935f      	PUSH R21
000316 c06b      	RJMP __ZERORES
                 __REPACK0:
000317 3f5f      	CPI  R21,0xFF
000318 f031      	BREQ __REPACK1
000319 0f66      	LSL  R22
00031a 0c00      	LSL  R0
00031b 9557      	ROR  R21
00031c 9567      	ROR  R22
00031d 2f75      	MOV  R23,R21
00031e 9508      	RET
                 __REPACK1:
00031f 935f      	PUSH R21
000320 2000      	TST  R0
000321 f00a      	BRMI __REPACK2
000322 c06b      	RJMP __MAXRES
                 __REPACK2:
000323 c064      	RJMP __MINRES
                 
                 __UNPACK1:
000324 e850      	LDI  R21,0x80
000325 2e07      	MOV  R0,R23
000326 2205      	AND  R0,R21
000327 0f66      	LSL  R22
000328 1f77      	ROL  R23
000329 2775      	EOR  R23,R21
00032a 0f55      	LSL  R21
00032b 9567      	ROR  R22
00032c 9508      	RET
                 
                 __CFD1U:
00032d 9468      	SET
00032e c001      	RJMP __CFD1U0
                 __CFD1:
00032f 94e8      	CLT
                 __CFD1U0:
000330 935f      	PUSH R21
000331 dff2      	RCALL __UNPACK1
000332 3870      	CPI  R23,0x80
000333 f018      	BRLO __CFD10
000334 3f7f      	CPI  R23,0xFF
000335 f408      	BRCC __CFD10
000336 c04b      	RJMP __ZERORES
                 __CFD10:
000337 e156      	LDI  R21,22
000338 1b57      	SUB  R21,R23
000339 f4aa      	BRPL __CFD11
00033a 9551      	NEG  R21
00033b 3058      	CPI  R21,8
00033c f40e      	BRTC __CFD19
00033d 3059      	CPI  R21,9
                 __CFD19:
00033e f030      	BRLO __CFD17
00033f efef      	SER  R30
000340 efff      	SER  R31
000341 ef6f      	SER  R22
000342 e77f      	LDI  R23,0x7F
000343 f977      	BLD  R23,7
000344 c01a      	RJMP __CFD15
                 __CFD17:
000345 2777      	CLR  R23
000346 2355      	TST  R21
000347 f0b9      	BREQ __CFD15
                 __CFD18:
000348 0fee      	LSL  R30
000349 1fff      	ROL  R31
00034a 1f66      	ROL  R22
00034b 1f77      	ROL  R23
00034c 955a      	DEC  R21
00034d f7d1      	BRNE __CFD18
00034e c010      	RJMP __CFD15
                 __CFD11:
00034f 2777      	CLR  R23
                 __CFD12:
000350 3058      	CPI  R21,8
000351 f028      	BRLO __CFD13
000352 2fef      	MOV  R30,R31
000353 2ff6      	MOV  R31,R22
000354 2f67      	MOV  R22,R23
000355 5058      	SUBI R21,8
000356 cff9      	RJMP __CFD12
                 __CFD13:
000357 2355      	TST  R21
000358 f031      	BREQ __CFD15
                 __CFD14:
000359 9576      	LSR  R23
00035a 9567      	ROR  R22
00035b 95f7      	ROR  R31
00035c 95e7      	ROR  R30
00035d 955a      	DEC  R21
00035e f7d1      	BRNE __CFD14
                 __CFD15:
00035f 2000      	TST  R0
000360 f40a      	BRPL __CFD16
000361 d032      	RCALL __ANEGD1
                 __CFD16:
000362 915f      	POP  R21
000363 9508      	RET
                 
                 __CDF1U:
000364 9468      	SET
000365 c001      	RJMP __CDF1U0
                 __CDF1:
000366 94e8      	CLT
                 __CDF1U0:
000367 9730      	SBIW R30,0
000368 4060      	SBCI R22,0
000369 4070      	SBCI R23,0
00036a f0b1      	BREQ __CDF10
00036b 2400      	CLR  R0
00036c f026      	BRTS __CDF11
00036d 2377      	TST  R23
00036e f412      	BRPL __CDF11
00036f 9400      	COM  R0
000370 d023      	RCALL __ANEGD1
                 __CDF11:
000371 2e17      	MOV  R1,R23
000372 e17e      	LDI  R23,30
000373 2011      	TST  R1
                 __CDF12:
000374 f032      	BRMI __CDF13
000375 957a      	DEC  R23
000376 0fee      	LSL  R30
000377 1fff      	ROL  R31
000378 1f66      	ROL  R22
000379 1c11      	ROL  R1
00037a cff9      	RJMP __CDF12
                 __CDF13:
00037b 2fef      	MOV  R30,R31
00037c 2ff6      	MOV  R31,R22
00037d 2d61      	MOV  R22,R1
00037e 935f      	PUSH R21
00037f df92      	RCALL __REPACK
000380 915f      	POP  R21
                 __CDF10:
000381 9508      	RET
                 
                 __ZERORES:
000382 27ee      	CLR  R30
000383 27ff      	CLR  R31
000384 2766      	CLR  R22
000385 2777      	CLR  R23
000386 915f      	POP  R21
000387 9508      	RET
                 
                 __MINRES:
000388 efef      	SER  R30
000389 efff      	SER  R31
00038a e76f      	LDI  R22,0x7F
00038b ef7f      	SER  R23
00038c 915f      	POP  R21
00038d 9508      	RET
                 
                 __MAXRES:
00038e efef      	SER  R30
00038f efff      	SER  R31
000390 e76f      	LDI  R22,0x7F
000391 e77f      	LDI  R23,0x7F
000392 915f      	POP  R21
000393 9508      	RET
                 
                 __ANEGD1:
000394 95f0      	COM  R31
000395 9560      	COM  R22
000396 9570      	COM  R23
000397 95e1      	NEG  R30
000398 4fff      	SBCI R31,-1
000399 4f6f      	SBCI R22,-1
00039a 4f7f      	SBCI R23,-1
00039b 9508      	RET
                 
                 __CWD1:
00039c 2f6f      	MOV  R22,R31
00039d 0f66      	ADD  R22,R22
00039e 0b66      	SBC  R22,R22
00039f 2f76      	MOV  R23,R22
0003a0 9508      	RET
                 
                 __MULW12U:
0003a1 9ffa      	MUL  R31,R26
0003a2 2df0      	MOV  R31,R0
0003a3 9feb      	MUL  R30,R27
0003a4 0df0      	ADD  R31,R0
0003a5 9fea      	MUL  R30,R26
0003a6 2de0      	MOV  R30,R0
0003a7 0df1      	ADD  R31,R1
0003a8 9508      	RET
                 
                 __DIVW21U:
0003a9 2400      	CLR  R0
0003aa 2411      	CLR  R1
0003ab e190      	LDI  R25,16
                 __DIVW21U1:
0003ac 0faa      	LSL  R26
0003ad 1fbb      	ROL  R27
0003ae 1c00      	ROL  R0
0003af 1c11      	ROL  R1
0003b0 1a0e      	SUB  R0,R30
0003b1 0a1f      	SBC  R1,R31
0003b2 f418      	BRCC __DIVW21U2
0003b3 0e0e      	ADD  R0,R30
0003b4 1e1f      	ADC  R1,R31
0003b5 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003b6 60a1      	SBR  R26,1
                 __DIVW21U3:
0003b7 959a      	DEC  R25
0003b8 f799      	BRNE __DIVW21U1
0003b9 01fd      	MOVW R30,R26
0003ba 01d0      	MOVW R26,R0
0003bb 9508      	RET
                 
                 __MODW21U:
0003bc dfec      	RCALL __DIVW21U
0003bd 01fd      	MOVW R30,R26
0003be 9508      	RET
                 
                 __SAVELOCR4:
0003bf 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c0 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003c1 931a      	ST   -Y,R17
0003c2 930a      	ST   -Y,R16
0003c3 9508      	RET
                 
                 __LOADLOCR4:
0003c4 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003c5 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003c6 8119      	LDD  R17,Y+1
0003c7 8108      	LD   R16,Y
0003c8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :  23 r1 :  10 r2 :   0 r3 :   2 r4 :   2 r5 :   4 r6 :   4 r7 :   0 
r8 :   2 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   4 r17:   6 r18:   4 r19:   2 r20:   0 r21:  29 r22:  31 r23:  31 
r24:  23 r25:   7 r26: 116 r27:  71 r28:   6 r29:   1 r30: 217 r31: 103 
x  :   4 y  : 156 z  :   8 
Registers used: 25 out of 35 (71.4%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :   6 and   :   1 andi  :   5 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   0 brmi  :   2 brne  :  17 brpl  :   3 brsh  :   1 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  20 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   1 cpc   :  22 cpi   :  31 cpse  :   0 dec   :  10 des   :   0 
eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   2 jmp   :  29 ld    :  31 ldd   :  40 ldi   : 185 
lds   :   9 lpm   :   7 lsl   :   7 lsr   :   1 mov   :  24 movw  :  14 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   3 out   :   6 pop   :   5 push  :   4 rcall :  48 ret   :  23 
reti  :   0 rjmp  :  47 rol   :  10 ror   :   6 sbc   :   5 sbci  :   6 
sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  88 std   :   2 sts   :  14 sub   :   5 subi  :   6 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 63 out of 116 (54.3%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000792   1890     48   1938   32768   5.9%
[.dseg] 0x000100 0x00031c      0     28     28    2048   1.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
