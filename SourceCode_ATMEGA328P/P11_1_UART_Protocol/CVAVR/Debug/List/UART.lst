
AVRASM ver. 2.1.30  D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P11.1_UART\CVAVR\Debug\List\UART.asm Sat Jan 04 13:35:11 2025

D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P11.1_UART\CVAVR\Debug\List\UART.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P11.1_UART\CVAVR\Debug\List\UART.asm(1091): warning: Register r3 already defined by the .DEF directive
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P11.1_UART\CVAVR\Debug\List\UART.asm(1092): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega328P
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R3
                 	.DEF __lcd_maxx=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0043 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0072 	JMP  _USART_RX_Complete
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _0x0:
000034 4144
000035 4154
000036 4620
000037 4f52      	.DB  0x44,0x41,0x54,0x41,0x20,0x46,0x52,0x4F
000038 204d
000039 4350
00003a 4300
00003b 4148      	.DB  0x4D,0x20,0x50,0x43,0x0,0x43,0x48,0x41
00003c 3a52
D:\_DO_AN_TOT_NGHIEP\MCU_project\_SourceCode_ATMEGA328P\P11.1_UART\CVAVR\Debug\List\UART.asm(1134): warning: .cseg .db misalignment - padding zero byte
00003d 0000      	.DB  0x52,0x3A,0x0
                 _0x2000003:
00003e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003f 0002      	.DW  0x02
000040 0301      	.DW  __base_y_G100
000041 007c      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000042 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000043 94f8      	CLI
000044 27ee      	CLR  R30
000045 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000046 e0f1      	LDI  R31,1
000047 bff5      	OUT  MCUCR,R31
000048 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000049 e08d      	LDI  R24,(14-2)+1
00004a e0a2      	LDI  R26,2
00004b 27bb      	CLR  R27
                 __CLEAR_REG:
00004c 93ed      	ST   X+,R30
00004d 958a      	DEC  R24
00004e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000050 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000051 e0a0      	LDI  R26,LOW(__SRAM_START)
000052 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000053 93ed      	ST   X+,R30
000054 9701      	SBIW R24,1
000055 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000056 e7ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000057 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000058 9185      	LPM  R24,Z+
000059 9195      	LPM  R25,Z+
00005a 9700      	SBIW R24,0
00005b f061      	BREQ __GLOBAL_INI_END
00005c 91a5      	LPM  R26,Z+
00005d 91b5      	LPM  R27,Z+
00005e 9005      	LPM  R0,Z+
00005f 9015      	LPM  R1,Z+
000060 01bf      	MOVW R22,R30
000061 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000062 9005      	LPM  R0,Z+
000063 920d      	ST   X+,R0
000064 9701      	SBIW R24,1
000065 f7e1      	BRNE __GLOBAL_INI_LOOP
000066 01fb      	MOVW R30,R22
000067 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000068 e0e0      	LDI  R30,__GPIOR0_INIT
000069 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 0098 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <alcd.h>
                 ;volatile char receivedData;
                 ;interrupt [USART_RXC] void USART_RX_Complete(void){
                 ; 0000 0004 interrupt [19] void USART_RX_Complete(void){
                 
                 	.CSEG
                 _USART_RX_Complete:
                 ; .FSTART _USART_RX_Complete
000072 920a      	ST   -Y,R0
000073 921a      	ST   -Y,R1
000074 92fa      	ST   -Y,R15
000075 936a      	ST   -Y,R22
000076 937a      	ST   -Y,R23
000077 938a      	ST   -Y,R24
000078 939a      	ST   -Y,R25
000079 93aa      	ST   -Y,R26
00007a 93ba      	ST   -Y,R27
00007b 93ea      	ST   -Y,R30
00007c 93fa      	ST   -Y,R31
00007d b7ef      	IN   R30,SREG
00007e 93ea      	ST   -Y,R30
                 ; 0000 0005   //Lay du lieu tu thanh ghi UDR0
                 ; 0000 0006     receivedData = UDR0;
00007f 91e0 00c6 	LDS  R30,198
000081 93e0 0300 	STS  _receivedData,R30
                 ; 0000 0007     lcd_gotoxy(5,1);
000083 e0e5      	LDI  R30,LOW(5)
000084 93ea      	ST   -Y,R30
000085 e0a1      	LDI  R26,LOW(1)
000086 d06a      	RCALL _lcd_gotoxy
                 ; 0000 0008     lcd_putchar(receivedData);
000087 91a0 0300 	LDS  R26,_receivedData
000089 d07e      	RCALL _lcd_putchar
                 ; 0000 0009 }
00008a 91e9      	LD   R30,Y+
00008b bfef      	OUT  SREG,R30
00008c 91f9      	LD   R31,Y+
00008d 91e9      	LD   R30,Y+
00008e 91b9      	LD   R27,Y+
00008f 91a9      	LD   R26,Y+
000090 9199      	LD   R25,Y+
000091 9189      	LD   R24,Y+
000092 9179      	LD   R23,Y+
000093 9169      	LD   R22,Y+
000094 90f9      	LD   R15,Y+
000095 9019      	LD   R1,Y+
000096 9009      	LD   R0,Y+
000097 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 000C {
                 _main:
                 ; .FSTART _main
                 ; 0000 000D     #pragma optsize-
                 ; 0000 000E     CLKPR = (1<<CLKPCE);
000098 e8e0      	LDI  R30,LOW(128)
000099 93e0 0061 	STS  97,R30
                 ; 0000 000F     CLKPR = 0x00;
00009b e0e0      	LDI  R30,LOW(0)
00009c 93e0 0061 	STS  97,R30
                 ; 0000 0010     #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0011     #pragma optsize+
                 ; 0000 0012     #endif
                 ; 0000 0013 
                 ; 0000 0014   //kich hoat nhan du lieu
                 ; 0000 0015   //cho phep ngat khi nhan
                 ; 0000 0016     UCSR0B = (1<<RXEN0) | (1<<RXCIE0);
00009e e9e0      	LDI  R30,LOW(144)
00009f 93e0 00c1 	STS  193,R30
                 ; 0000 0017     //cau hinh du lieu: 8 bit
                 ; 0000 0018     UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
0000a1 e0e6      	LDI  R30,LOW(6)
0000a2 93e0 00c2 	STS  194,R30
                 ; 0000 0019     UCSR0A = 0x00;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 93e0 00c0 	STS  192,R30
                 ; 0000 001A 
                 ; 0000 001B   //chon toc do Baud Rate, 9600bps
                 ; 0000 001C     UBRR0H=0x00;
0000a7 93e0 00c5 	STS  197,R30
                 ; 0000 001D     UBRR0L=0x33;
0000a9 e3e3      	LDI  R30,LOW(51)
0000aa 93e0 00c4 	STS  196,R30
                 ; 0000 001E 
                 ; 0000 001F     lcd_init(16);
0000ac e1a0      	LDI  R26,LOW(16)
0000ad d082      	RCALL _lcd_init
                 ; 0000 0020     lcd_clear();
0000ae d04f      	RCALL _lcd_clear
                 ; 0000 0021     lcd_gotoxy(2,0);
0000af e0e2      	LDI  R30,LOW(2)
0000b0 93ea      	ST   -Y,R30
0000b1 e0a0      	LDI  R26,LOW(0)
0000b2 d03e      	RCALL _lcd_gotoxy
                 ; 0000 0022     lcd_putsf("DATA FROM PC");
                +
0000b3 e6a8     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b5 d067      	RCALL _lcd_putsf
                 ; 0000 0023     lcd_gotoxy(0,1);
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 93ea      	ST   -Y,R30
0000b8 e0a1      	LDI  R26,LOW(1)
0000b9 d037      	RCALL _lcd_gotoxy
                 ; 0000 0024     lcd_putsf("CHAR:");
                +
0000ba e7a5     +LDI R26 , LOW ( 2 * _0x0 + ( 13 ) )
0000bb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW2FN _0x0,13
0000bc d060      	RCALL _lcd_putsf
                 ; 0000 0025     #asm("sei")
0000bd 9478      	sei
                 ; 0000 0026 while (1){}
                 _0x3:
0000be cfff      	RJMP _0x3
                 ; 0000 0027 }
                 _0x6:
0000bf cfff      	RJMP _0x6
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000c0 93aa      	ST   -Y,R26
0000c1 81e8      	LD   R30,Y
0000c2 71e0      	ANDI R30,LOW(0x10)
0000c3 f011      	BREQ _0x2000004
0000c4 9a2b      	SBI  0x5,3
0000c5 c001      	RJMP _0x2000005
                 _0x2000004:
0000c6 982b      	CBI  0x5,3
                 _0x2000005:
0000c7 81e8      	LD   R30,Y
0000c8 72e0      	ANDI R30,LOW(0x20)
0000c9 f011      	BREQ _0x2000006
0000ca 9a2a      	SBI  0x5,2
0000cb c001      	RJMP _0x2000007
                 _0x2000006:
0000cc 982a      	CBI  0x5,2
                 _0x2000007:
0000cd 81e8      	LD   R30,Y
0000ce 74e0      	ANDI R30,LOW(0x40)
0000cf f011      	BREQ _0x2000008
0000d0 9a29      	SBI  0x5,1
0000d1 c001      	RJMP _0x2000009
                 _0x2000008:
0000d2 9829      	CBI  0x5,1
                 _0x2000009:
0000d3 81e8      	LD   R30,Y
0000d4 78e0      	ANDI R30,LOW(0x80)
0000d5 f011      	BREQ _0x200000A
0000d6 9a28      	SBI  0x5,0
0000d7 c001      	RJMP _0x200000B
                 _0x200000A:
0000d8 9828      	CBI  0x5,0
                 _0x200000B:
                +
0000d9 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000da 958a     +DEC R24
0000db f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000dc 9a2c      	SBI  0x5,4
                +
0000dd e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000de 958a     +DEC R24
0000df f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e0 982c      	CBI  0x5,4
                +
0000e1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e2 958a     +DEC R24
0000e3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e4 c075      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000e5 93aa      	ST   -Y,R26
0000e6 81a8      	LD   R26,Y
0000e7 dfd8      	RCALL __lcd_write_nibble_G100
0000e8 81e8          ld    r30,y
0000e9 95e2          swap  r30
0000ea 83e8          st    y,r30
0000eb 81a8      	LD   R26,Y
0000ec dfd3      	RCALL __lcd_write_nibble_G100
                +
0000ed e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000ee 958a     +DEC R24
0000ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000f0 c069      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000f1 93aa      	ST   -Y,R26
0000f2 81e8      	LD   R30,Y
0000f3 e0f0      	LDI  R31,0
0000f4 5fef      	SUBI R30,LOW(-__base_y_G100)
0000f5 4ffc      	SBCI R31,HIGH(-__base_y_G100)
0000f6 81e0      	LD   R30,Z
0000f7 81a9      	LDD  R26,Y+1
0000f8 0fae      	ADD  R26,R30
0000f9 dfeb      	RCALL __lcd_write_data
0000fa 8049      	LDD  R4,Y+1
0000fb 8038      	LDD  R3,Y+0
0000fc 9622      	ADIW R28,2
0000fd 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0000fe e0a2      	LDI  R26,LOW(2)
0000ff d05c      	RCALL SUBOPT_0x0
000100 e0ac      	LDI  R26,LOW(12)
000101 dfe3      	RCALL __lcd_write_data
000102 e0a1      	LDI  R26,LOW(1)
000103 d058      	RCALL SUBOPT_0x0
000104 e0e0      	LDI  R30,LOW(0)
000105 2e3e      	MOV  R3,R30
000106 2e4e      	MOV  R4,R30
000107 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000108 93aa      	ST   -Y,R26
000109 81a8      	LD   R26,Y
00010a 30aa      	CPI  R26,LOW(0xA)
00010b f011      	BREQ _0x2000011
00010c 1446      	CP   R4,R6
00010d f048      	BRLO _0x2000010
                 _0x2000011:
00010e e0e0      	LDI  R30,LOW(0)
00010f 93ea      	ST   -Y,R30
000110 9433      	INC  R3
000111 2da3      	MOV  R26,R3
000112 dfde      	RCALL _lcd_gotoxy
000113 81a8      	LD   R26,Y
000114 30aa      	CPI  R26,LOW(0xA)
000115 f409      	BRNE _0x2000013
000116 c043      	RJMP _0x2020001
                 _0x2000013:
                 _0x2000010:
000117 9443      	INC  R4
000118 9a2e      	SBI  0x5,6
000119 81a8      	LD   R26,Y
00011a dfca      	RCALL __lcd_write_data
00011b 982e      	CBI  0x5,6
00011c c03d      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00011d 93ba      	ST   -Y,R27
00011e 93aa      	ST   -Y,R26
00011f 931a      	ST   -Y,R17
                 _0x2000017:
000120 81e9      	LDD  R30,Y+1
000121 81fa      	LDD  R31,Y+1+1
000122 9631      	ADIW R30,1
000123 83e9      	STD  Y+1,R30
000124 83fa      	STD  Y+1+1,R31
000125 9731      	SBIW R30,1
000126 91e4      	LPM  R30,Z
000127 2f1e      	MOV  R17,R30
000128 30e0      	CPI  R30,0
000129 f019      	BREQ _0x2000019
00012a 2fa1      	MOV  R26,R17
00012b dfdc      	RCALL _lcd_putchar
00012c cff3      	RJMP _0x2000017
                 _0x2000019:
00012d 8118      	LDD  R17,Y+0
00012e 9623      	ADIW R28,3
00012f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000130 93aa      	ST   -Y,R26
000131 9a23      	SBI  0x4,3
000132 9a22      	SBI  0x4,2
000133 9a21      	SBI  0x4,1
000134 9a20      	SBI  0x4,0
000135 9a24      	SBI  0x4,4
000136 9a26      	SBI  0x4,6
000137 9a25      	SBI  0x4,5
000138 982c      	CBI  0x5,4
000139 982e      	CBI  0x5,6
00013a 982d      	CBI  0x5,5
00013b 8068      	LDD  R6,Y+0
00013c 81e8      	LD   R30,Y
00013d 58e0      	SUBI R30,-LOW(128)
                +
00013e 93e0 0303+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000140 81e8      	LD   R30,Y
000141 54e0      	SUBI R30,-LOW(192)
                +
000142 93e0 0304+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000144 e1a4      	LDI  R26,LOW(20)
000145 e0b0      	LDI  R27,0
000146 940e 0168 	CALL _delay_ms
000148 d018      	RCALL SUBOPT_0x1
000149 d017      	RCALL SUBOPT_0x1
00014a d016      	RCALL SUBOPT_0x1
00014b e2a0      	LDI  R26,LOW(32)
00014c df73      	RCALL __lcd_write_nibble_G100
                +
00014d ec88     +LDI R24 , LOW ( 200 )
00014e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00014f 9701     +SBIW R24 , 1
000150 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000151 e2a8      	LDI  R26,LOW(40)
000152 df92      	RCALL __lcd_write_data
000153 e0a4      	LDI  R26,LOW(4)
000154 df90      	RCALL __lcd_write_data
000155 e8a5      	LDI  R26,LOW(133)
000156 df8e      	RCALL __lcd_write_data
000157 e0a6      	LDI  R26,LOW(6)
000158 df8c      	RCALL __lcd_write_data
000159 dfa4      	RCALL _lcd_clear
                 _0x2020001:
00015a 9621      	ADIW R28,1
00015b 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _receivedData:
000300           	.BYTE 0x1
                 __base_y_G100:
000301           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00015c df88      	RCALL __lcd_write_data
00015d e0a3      	LDI  R26,LOW(3)
00015e e0b0      	LDI  R27,0
00015f 940c 0168 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000161 e3a0      	LDI  R26,LOW(48)
000162 df5d      	RCALL __lcd_write_nibble_G100
                +
000163 ec88     +LDI R24 , LOW ( 200 )
000164 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000165 9701     +SBIW R24 , 1
000166 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000167 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000168 9610      	adiw r26,0
000169 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016a ed80     +LDI R24 , LOW ( 0x7D0 )
00016b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00016c 9701     +SBIW R24 , 1
00016d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00016e 95a8      	wdr
00016f 9711      	sbiw r26,1
000170 f7c9      	brne __delay_ms0
                 __delay_ms1:
000171 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   4 r4 :   4 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  23 r25:   7 r26:  42 r27:  10 r28:   4 r29:   1 r30:  75 r31:   9 
x  :   3 y  :  59 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   5 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   1 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   3 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   2 jmp   :  28 ld    :  26 ldd   :   7 ldi   :  57 
lds   :   2 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   5 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :   7 pop   :   0 push  :   0 rcall :  28 ret   :   6 
reti  :   1 rjmp  :  12 rol   :   0 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   2 sts   :  10 sub   :   0 subi  :   3 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 38 out of 116 (32.8%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002e4    710     30    740   32768   2.3%
[.dseg] 0x000100 0x000305      0      5      5    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
