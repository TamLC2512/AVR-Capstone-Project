;//Giao tiep SPI - MASTER
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define MOSI    3   //chan PB3
;#define MISO    4   //chan PB4
;#define SCK     5   //chan PB5
;#define SS      2   //chan PB2
;
;volatile char receivedData;
;
;void UART_Init(){
; 0000 000B void UART_Init(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000C     //kich hoat nhan du lieu
; 0000 000D     //cho phep ngat khi nhan
; 0000 000E     UCSR0B = (1<<RXEN0) | (1<<RXCIE0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 000F     //cau hinh du lieu: 8 bit
; 0000 0010     UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0011     UCSR0A = 0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0012 
; 0000 0013     //chon toc do Baud Rate, 9600bps
; 0000 0014     UBRR0H=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0015     UBRR0L=0x33;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0016 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void SPI_MASTER_Init(){
; 0000 0018 void SPI_MASTER_Init(){
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0019     //Khoi tao SPI MASTER
; 0000 001A     DDRB |= (1<<MOSI)|(1<<SCK)|(1<<SS); //MOSI, SCK, SS = Output
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 001B     DDRB &= ~(1<<MISO);                 //MISO = Input
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001C     PORTB |= (1<<SS);                   //dien tro keo len
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001D 
; 0000 001E     //SPI Enable, Master, F/128
; 0000 001F     SPCR |= (1<<SPE)|(1<<MSTR)| (1<<SPR1)|(1<<SPR0);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0020 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;void SPI_MASTER_Transmit(unsigned char data) {
; 0000 0022 void SPI_MASTER_Transmit(unsigned char data) {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0023     SPDR = data;                        //ghi du lieu vao thanh ghi du lieu
;PCODE: $0000002B VOL: 0
;	data -> Y+0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0024     while (!(SPSR & (1<<SPIF)));        //hoan thanh gui
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0025 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void main(void)
; 0000 0028 {
;PCODE: $00000037 VOL: 0
; 0000 0029 #pragma optsize-
; 0000 002A CLKPR=(1<<CLKPCE);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 002B CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002C #ifdef _OPTIMIZE_SIZE_
; 0000 002D #pragma optsize+
; 0000 002E #endif
; 0000 002F 
; 0000 0030 UART_Init();
;PCODE: $0000003C VOL: 0
; 0000 0031 SPI_MASTER_Init();
;PCODE: $0000003D VOL: 0
; 0000 0032 #asm("sei")
;PCODE: $0000003E VOL: 0
	sei
;PCODE: $0000003F VOL: 0
; 0000 0033 
; 0000 0034 while (1){}
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0035 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;
;//Nhan duoc Data tu PC se gui sang SLAVE thong qua giao thuc SPI
;interrupt [USART_RXC] void USART_RX_Complete(void) {
; 0000 0038 interrupt [19] void USART_RX_Complete(void) {
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0039     receivedData = UDR0;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 1
; 0000 003A 
; 0000 003B     PORTB &= ~(1<<SS);      //keo chan SS xuong muc thap de truyen
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003C     SPI_MASTER_Transmit(receivedData);
;PCODE: $0000004C VOL: 1
;PCODE: $0000004D VOL: 0
; 0000 003D     PORTB |= (1<<SS);       //keo chan SS len khi ket thuc truyen
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003E }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
